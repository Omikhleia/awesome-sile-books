# On the road to MathML

{width="80%lw"}
> "It's a dangerous business, Frodo, going out your door. You step onto the road, and if you don't keep your feet, there's no knowing where you might be swept off to."
^ J.R.R. Tolkien, _The Lord of the Rings._

Alright, let's get one thing straight.
For the sake of everyone's sanity, we'll assume you're not the kind of brave soul who actually typesets math formulas in raw MathML, let alone its cryptic "TeX-like" variant (see §[](#messing-with-math) for that delightful experience).
Instead, let's be reasonable and assume you've used a proper tool -- maybe MathJax or MathType -- to create your math content, and you opted for MathML as the output format.
Perhaps you want to reuse it in a web page, an ePub, or anything else that supports MathML.

Great, so now you've got a MathML document in XML format...
Let's start with a simple formula like this one:[^golden-ratio]

[^golden-ratio]: The golden ratio, $`φ`, is a mathematical constant that appears in various fields, from art to architecture, and even nature. I used a straight variant of the symbol, $`ϕ`, just to make things interesting. I am leaving out the namespace for brevity -- and you'll see why in a moment.

::::
{custom-style="blockquote"}
:::
```xml
<math xmlns="..." display="block">
  <mrow>
    <mi>&straightphi;</mi>
    <mo>=</mo>
    <mfrac>
      <mrow>
        <mn>1</mn>
        <mo>+</mo>
        <msqrt>
          <mn>5</mn>
        </msqrt>
      </mrow>
      <mn>2</mn>
    </mfrac>
  </mrow>
</math>
```
:::
::::
^ The golden ratio in MathML.

You want SILE to render it? Well, hold your horses.
If you try running SILE with this document as input, you'll be greeted by a less-than-friendly error message.

_Erm._ That's it? End of the road?
Not quite. Buckle up, because you're about to embark on a bumpy ride.

## Entities encountered

The first stumbling block SILE's XML input module hits is the entities in your MathML content.

Sure, you could replace these with the actual Unicode characters ($`\mathrm{ϕ}`) or use numeric entities (`&#x3D5;`), but the first isn't exactly keyboard-friendly, and the second is hardly readable.
Plus, if your MathML was generated by a tool that spits out named entities, manually replacing them isn't an ideal solution.

It's time to roll up our sleeves and hack a bit.

{custom-style="blockquote"}
:::
```xml
<!DOCTYPE math [
  <!ENTITY straightphi "&#x3D5;">
]>
<math xmlns="..." display="block">
  <mrow>
    <mi>&straightphi;</mi>
    ...
</math>
```
:::

## A top-level tag in the way

The next roadblock?
SILE doesn't recognize the top-level `<math>` tag of your MathML content.
It'll throw a fit the moment it encounters it.

Alright, let's fix this by wrapping our MathML content inside a proper SIL XML document, and loading the math support.[^loading-math]
But since we're changing the top-level tag, we'll also need to tweak our previous hack to handle this adjustment.

Here we go, deeper down the rabbit hole!

{custom-style="blockquote"}
:::
```xml
<!DOCTYPE document [
  <!ENTITY straightphi "&#x3D5;">
]>
<document papersize="a4">
  <use module="packages.math"/>
  <math xmlns="..." display="block">
    <mrow>
      <mi>&straightphi;</mi>
      ...
  </math>
</document>
```
:::

[^loading-math]: We could also use a document class that automatically loads the math package. Say, the *resilient.book* class from my _re·sil·ient_ collection of 3rd-party modules for SILE.

## The top-level tag strikes back

Yay, SILE is happy now! But... wait, why is our output completely blank?
This empty page is not what we signed up for.

Go read the user manual, folks. It's all there, I promise.
Or better yet, let me save you the trouble: SILE thinks the `<math>` tag contains its TeX-like math content, not MathML.
Yes, really. Don't ask me why -- it just does.

What SILE actually expects is a `<mathml>` tag with its own special set of attributes.

Alright then, let's give this another shot, shall we?

::::
{custom-style="blockquote"}
:::
```xml
<!DOCTYPE document [
  <!ENTITY straightphi "&#x3D5;">
]>
<document papersize="a4">
  <use module="packages.math"/>
  <mathml mode="display">
    <mrow>
      <mi>&straightphi;</mi>
      <mo>=</mo>
      <mfrac>
        <mrow>
          <mn>1</mn>
          <mo>+</mo>
          <msqrt>
            <mn>5</mn>
          </msqrt>
        </mrow>
        <mn>2</mn>
      </mfrac>
  </mrow>
  </mathml>
</document> 
```
:::
::::
^ Our golden ratio wrapped in a working SIL XML document.

_Now,_ if you run SILE with this updated document, you should see the golden ratio beautifully rendered on your page -- centered, in all its glory, as "display math."

## Our map for the MathML journey

In summary, to successfully render MathML content in SILE:

 - Wrap it in a SILE XML document:

    - Create a valid SILE XML document with a top-level `<document>` tag, and load the math package.

    - Change the `<math>` tag to `<mathml>`, and modify the attributes as needed...

 - Replace entities:

    - Convert named entities in your MathML to either Unicode characters (e.g., π) or numeric references (e.g., `&#x3C0;`).
    
    - Or use a `DOCTYPE` declaration to define named entities in your MathML content.

Follow this route, and you'll reach your destination with beautifully rendered math in SILE: a true testament to your perseverance and dedication.

$$`% Yes we cheat here, with the simpler TeX math syntax, but it's just for the showcase
\phi = \frac{1 + \sqrt{5}}{2}`

## At the crossroads...

{rule="0.4pt"}
> I met the dragon in a cave by the mountain. /
> Now I bring the evidence, the beast is alive.
^ Gojira, "Where Dragons Dwell" \
  (_From Mars to Sirius,_ 2005).

What guarantee do we have that the above recipe will work flawlessly with all MathML content?
In truth, none.
Beware, my friend... here be dragons.

_Spacing rules_:
MathML defines its own spacing algorithm for laying out mathematical content, relying heavily on attributes (`lspace` and `rspace` -- whether specified directly in the markup, or implied via a huge "operator dictionary").
SILE, however, opts for the TeX spacing algorithm based on "atom types," as described in _The TeXbook_ (see notably p.\ 170).
In practice, this means that SILE disregards the `lspace` and `rspace` attributes.
MathML documents might however rely on these attributes to fine-tune the spacing of their expressions, so be ready for surprises when rendering them in SILE.

_Unimplemented features_:
SILE does not yet support all MathML features.
In particular, several attributes (such as `scriptlevel`) are just ignored.

_Invisible operators_:
Unicode defines a range of "invisible" operators (U+2061 to U+2064).
While MathML Core doesn't elaborate much on their behavior beyond listing them in the appendices, MathML4 briefly addresses them in §3.1.1: "...they usually render invisibly... but may influence visual spacing."
Despite this lack of clarity, several test cases, such as those in Joe Javawaski's Browser Test and the MathML3 Test Suite, do use these operators, as do various other sources, sometimes with attributes up the wazoo...[^invisible-operators]
 
[^invisible-operators]: One might also point out the use of U+200B, the zero-width space, in the MathML Test Suite.
E.g. "Torture Tests", "complex1" in `<mtext>` elements:
The likely intent behind this dubious use is to cancel out spacing introduced by the $`\nabla` as an operator, instead of redefining it as an identifier.
Or is it?
It seems those folks are truly pushing the envelope, bordering on the absurd. But hey, it's all in the spirit of thoroughly testing an insanely complex standard, so we can't fault them for that, right?
