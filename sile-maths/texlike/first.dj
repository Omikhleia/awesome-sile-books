{.unnumbered .notoc}
# Contents

:_TOC_:

# Introduction

{width="80%lw"}
> "Grandpa, how did you end up on adventure in the perilous Land of Maths?"
>
> "Well, it all began with a simple, amusing task involving square roots, nth roots, and the like..."
>
> "And that went smoothly, didn't it?"
>
> "At first, yes. But then I started picking out random formulas, sure I could typeset anything that came my way. Little did I know, I had wandered into the lair of the Hydra."
^ Grandpa's bedtime stories.


Euler equations (Finite volume form)
$$`\def{right}{}
\def{left}{}
\table[columnalign=left left]{
\rho_{m,n+1} &= \rho_{m,n} - \frac{1}{V_m}\int_{t_n}^{t_{n+1}}\oint_{\partial V_m}\rho\mathbf{u} \cdot \hat{n}\, ds\, dt \\
\mathbf{u}_{m,n+1} &= \mathbf{u}_{m,n} - \frac{1}{\rho_{m,n} V_m}\int_{t_n}^{t_{n+1}}\oint_{\partial V_m} (\rho\mathbf{u} \otimes \mathbf{u} - p\mathbf{I}) \cdot \hat{n}\, ds\, dt \\
\mathbf{e}_{m,n+1} &= \mathbf{e}_{m,n} - \frac{1}{2}\left(u^2_{m,n+1} - u^2_{m,n}\right) - \frac{1}{\rho_{m,n} V_m}\int_{t_n}^{t_{n+1}}\oint_{\partial V_m} \left(\rho e + \frac{1}{2}\rho u^2 + p\right)\mathbf{u} \cdot \hat{n}\, ds\, dt \\
}`

$$`\def{dfrac}{\frac{#1}{#2}}
\forall (a,b > 0),
\lim_{x\to+\infty}\left(\dfrac{a^{\frac{1}{x}}+b^{\frac{1}{x}}}{2}\right)^x=\sqrt{ab}`










## TeX-like stuff needing doc

  - fix(math): Handle LaTeX-like math top accent commands correctly

    One wants `\vec{v}`, `\hat{n}` etc. to result in proper stacking of
    the corresponding symbol over the argument, instead of the symbol
    alone and the argument being lost --> EXPLAIN GROUPS

  - fix(math): Paired open/close atoms shall be forced in a mrow in TeX-like math

    So that stretching occurs on the relevant spans of content. --> EXPLAIN GROUPS AND OPEN/CLOSE

## Interesting views on MathML


{rule="0.4pt"}
> MathML is the zombie of web standards. Each decade brought one additional, differently broken implementation (...).
> Bugs in those (...) implementations are, of course, aplenty; I find a new one every time something forces me to look at native MathML implementations (...) and most bugs go for years without bugs even being filed (...).
^ Peter Krautzberger,\
  "Thoughts on Print Equation Layout"\
  ([blog post](https://www.peterkrautzberger.org/0218/){custom-style=link}, Sept. 17, 2022).



The fact that the only way to get a decent rendering is to use a proprietary engine like MathJax, KaTeX, or MathType, which all have their own quirks and bugs.
Pandoc, the ultimate tool for converting between markup languages, even supports converting LaTeX to MathML.


# A not-so-gentle introduction

{width="80%lw"}
> "The Hydra? That beast with countless heads that regrows two for every one that's cut off?"
>
> "Exactly. A Great Monster, the relentless Devourer of Formulas."
> 
> "And did you manage to defeat it?"
>
> "I can't say for sure. But I stopped complaining and making issues. I just drew my sword and kept fighting the beast. I committed to the battle, through the night and into the day.
^ Grandpa's bedtime stories, cont'd.

## From TeX to MathML

{rule="0.4pt"}
> The reality is that extremely few applications accept MathML, it's a cumbersome process, and MathML is dropped in the end, converted to whatever internal format is used by the target application.
^ Peter Krautzberger,\
  "Thoughts on Print Equation Layout"\
  ([blog post](https://www.peterkrautzberger.org/0218/){custom-style=link}, Sept. 17, 2022).

Donald Knuth released the first version of TeX in 1978, with _The TeXbook_ following in 1984.
Mathematical typesetting was a core feature of TeX from the start.
LaTeX2~ε~, launched in 1994, brought a more user-friendly syntax and package system, building on Leslie Lamport's work in the 1980s. Altogether, it took about 15 years to bring TeX and LaTeX to a mature state—one that remains foundational and widely used in academia and publishing today, some 30 years later.

MathML1, on the other hand, debuted in July 1999, followed by MathML2 in October 2003 and MathML3 in October 2010, revised in April 2014.
Despite roughly 15 years of development, MathML still struggles with adoption and inconsistent support across browsers and applications.

But its story doesn't end there.
MathML4 began development in September 2021 and remains a Working Draft as of October 2024.
Another decade has passed, hundreds of pages of specifications have been written, and MathML is still evolving.
Alongside this, MathML Core was introduced in August 2021 as a subset of MathML3.
It supposedly targets broader compatibility, referencing OpenType math font features and reorienting the MathML stack toward web technologies, with a focus on CSS.
As of November 2023, MathML Core also remains a Working Draft.
Needless to say, the MathML landscape is complex, with a long history, numerous moving parts, and its share of conflicts and critiques.

While I may not fully agree with all of Peter's tirade, his blog post is well worth reading, and he raises several valid points.
His observations resonate with my own frustrations about MathML's idiosyncrasies, as I started reviewing SILE's math capabilities.
The need for an extensive predefined operator table in MathML underscores the limitations of the language in achieving true semantic value.
The overly complex OpenType math font features require fonts to include subsets of Fraktur, calligraphic, double-struck, and other specialized characters, along with intricate properties and complicated assembly rules for operator characters.
Not only isn't MathML a panacea for mathematical typesetting, but there are few fully-compliant fonts available, for a very good reason: It's very demanding to cover every aspect of the specification(s).

## SILE Enters the Fray

SILE's math capabilities were initially developed by Rui Xia, Olivier Nicole, and others from April 2019 to September 2021 and were officially released in version 0.12.0.
I wasn't involved yet in the SILE typesetting system during that period.[^sile-activity-feeling] I began using SILE in August 2021, gradually engaging with the community and contributing to the project on other fronts. But I am confident that the math engine was a significant milestone for the project, representing a major effort by the team, and that it was a much-anticipated feature.[^sile-anticipations]

[^sile-anticipations]: See [Reddit posts](https://www.reddit.com/r/LaTeX/comments/dsoa6g/sile_the_latex_alternative/){custom-style=link} from Nov. 2019:
"(...) not having (good) math support will hamper adoption by a larger community." And "they are kinda shooting themselves in the foot by not including math support."

The math functionality in SILE is based on some iteration of MathML.[^sile-mathml-compat]
Recognizing that end-users were unlikely to write MathML directly, the team introduced a lightweight TeX-like syntax for math input. This syntax, while reminiscent of TeX, has its own unique structure that can blend with MathML rather than fully mirroring either format.

[^sile-activity-feeling]: I may have been left with an overly optimistic impression of the project's activity.
There were frequent discussions about imminent math support, several contributors tackling various tasks, and Simon Cozens actively involved.
A few years later, however, the momentum seems to have slowed. But I don't regret my involvement; I've learned a lot and enjoyed the journey.

[^sile-mathml-compat]: I guess essentially based a draft of MathML3 if not an earlier version; and obviously MathML Core wasn't really a thing back then.

However, this implementation struggled to gain significant traction among users. But could have it been otherwise?

{rule="0.4pt"}
> MathML is the zombie of web standards. Each decade brought one additional, differently broken implementation (...).
> Bugs in those (...) implementations are, of course, aplenty; I find a new one every time something forces me to look at native MathML implementations (...) and most bugs go for years without bugs even being filed (...).
^ Peter Krautzberger, _Ibid._

When I finally decided to test it with SILE 0.15.0, _every_ equation I tried to typeset encountered issues.
More precisely, few _even_ rendered, and those that did all failed _badly_ to match the expected output.

Why weren’t bug issues filed?
As Peter Krautzberger put it (regarding MathML and the web in general---but it applies here too), "nobody cares and nobody uses it."
I’m fairly certain SILE's math implementation hasn’t been used extensively, even by its own developers, beyond a few test cases and examples.
Had it been, the numerous quirks in the MathML engine and the limitations of the TeX-like syntax would likely have been noticed and addressed.
Yet, in the three years since SILE 0.12.0 was released, no significant improvements were made to the math engine.

Why did it take me that long to use it? My SILE-based book projects rarely require typesetting complex mathematical equations.
But why do I care, then?
Honestly, my sole motivation is my _re·sil·ient_ collection of modules for SILE, which I rely on for generating books.
It advocates Djot (or Markdown) as the primary markup language of choice for content, over any custom syntax...
and Djot (or Markdown) supports math, with the most common syntax being the well-established LaTeX syntax.
It's a jig-saw puzzle, where each piece must fit perfectly to make the whole picture shine.
If I want _re·sil·ient_ to stand out in tackling the Hydra of Digital Typesetting, then I need to ensure SILE’s math engine is up to the task.

## Typst Ascending

Originally envisioned in 2019 by Martin Haug and Laurenz Mädje, Typst began in earnest as Mädje's thesis project in late 2022, with a public "beta" launch in March 2023.
Soon after, a commercial company was founded to advance the project further.
It quickly attracted a vibrant community of contributors and users, generating considerable hype and enthusiasm.
While Typst isn't the focus here---given its unique markup language, different design philosophy, and its own specialized niche in the field---it's noteworthy for the strong momentum it has gained in the math typesetting community.
It could be argued that "it seems to have the upper hand" in the math typesetting world, as a contributor remarked in a recent conversation.

Where does this leave SILE, with its incomplete MathML-based engine, a not-quite-TeX-like syntax, and a relatively small user base? Despite its potential, SILE risks being left behind...


## Bright Future under Dark Skies

... Or does it?
This booklet is authored mostly in Djot, with but a few XML documents and Lua scripts thrown in.[^sile-math--booklet]
SILE's flexibility and extensibility are its greatest strengths, and the math engine is no exception.

[^sile-math--booklet]: MathML tests are written as simple SIL XML files, just wrapping the math content.
Lua scripts are used for generating tables in the chapters on character variants.
The Djot files are the main content, and all the math equations are written in (La)TeX-like syntax.

---

At the end of the day, SILE {=0.15.6=} represents the resulting effort for improving the math engine in several critical areas.
And this booklet is a showcase of the progress made so far, with a critical assessment of the current state of SILE's math capabilities.
