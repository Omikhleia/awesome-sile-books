{.unnumbered .notoc}
# Contents


{custom-style=center}
{=DRAFT PRE-VERSION 202411xx=}

:::
$$`\table[columnalign=left left]{
\rho_{m,n+1} &= \rho_{m,n} - \frac{1}{V_m}\int_{t_n}^{t_{n+1}}\oint_{\partial V_m}\rho\mathbf{u} \cdot \hat{n}\, ds\, dt \\
\mathbf{u}_{m,n+1} &= \mathbf{u}_{m,n} - \frac{1}{\rho_{m,n} V_m}\int_{t_n}^{t_{n+1}}\oint_{\partial V_m} (\rho\mathbf{u} \otimes \mathbf{u} - p\mathbf{I}) \cdot \hat{n}\, ds\, dt \\
\mathbf{e}_{m,n+1} &= \mathbf{e}_{m,n} - \frac{1}{2}\left(u^2_{m,n+1} - u^2_{m,n}\right) - \frac{1}{\rho_{m,n} V_m}\int_{t_n}^{t_{n+1}}\oint_{\partial V_m} \left(\rho e + \frac{1}{2}\rho u^2 + p\right)\mathbf{u} \cdot \hat{n}\, ds\, dt \\
}`
:::
^ Euler equations (finite volume form)

:_TOC_:

```=sile
\use[module=packages.framebox]
% Quick and dirty default definition of a new custom style...
\define[command=customframe]{\center{\roughbox[bordercolor=#3c6a7c,
  fillcolor=230,padding=10pt, enlarge=true]{\parbox[width=90%lw, minimize=false]{\font[size=9pt]%
  \process}}}}
\lua{
SILE.scratch.styles.alignments["framed"] = "customframe"

-- HACK https://github.com/sile-typesetter/sile/issues/2145
SILE.settings:registerHook("font.size", function (value)
  SILE.settings:set("math.font.size", value)
end)

-- HACK https://github.com/Omikhleia/resilient.sile/issues/99
local self = SILE.documentState.documentClass
self:registerCommand("sectioning:part:hook", function (options, _)
  local before = SU.boolean(options.before, false)
  if before then
    -- Parts cancel headers and folios
    SILE.call("noheaderthispage")
    SILE.call("nofoliothispage")
    -- BEGIN FIX
    -- Previous section titles (in technical mode) or chapter title (in novel mode)
    -- is no longer valid.
    SILE.scratch.headers.odd = nil
    if self.headers ~= "novel" then
      -- in technical mode, even headers contain the current chapter title,
      -- invalid upon a new part.
      SILE.scratch.headers.even = nil
    end
    -- END FIX
    -- Parts reset footnotes and chapters
    SILE.call("set-counter", { id = "footnote", value = 1 })
    SILE.call("set-multilevel-counter", { id = "sections", level = 1, value = 0 })
  end
end, "Apply part hooks (counter resets, footers and headers, etc.)")

-- For some fancy effect in a note...
self:loadPackage("scalebox")
self:registerCommand("mirrored", function (_, content)
  SILE.call("scalebox", { xratio = -1, yratio = 1 }, content)
end, "Reflect content horizontally")
}
```
